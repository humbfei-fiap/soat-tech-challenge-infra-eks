name: 'Plan and Create PR to Main'
on:
  push:
    branches:
      - develop

permissions:
  id-token: write # Permissão para o workflow obter um OIDC token
  pull-requests: write # Permissão para comentar nos Pull Requests
  contents: read  # Permissão para o workflow ler o repositório
  statuses: write # Permissão para criar status checks

concurrency:
  group: terraform-state-lock
  cancel-in-progress: true

jobs:
  plan_and_create_pr:
    name: 'Terraform Plan and Create PR'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -no-color -out=tfplan

      - name: Create Plan Summary
        id: plan_to_markdown
        run: |
          # Gera um sumário em markdown a partir do plano JSON para ser usado no corpo do PR
          terraform show -json tfplan > tfplan.json
          PLAN_SUMMARY=$(jq -r '''
          (
            "### Terraform Plan Summary",
            "",
            "| Action | Resource Type | Name |",
            "| :--- | :--- | :--- |",
            (.resource_changes // []) | map(select(.change.actions[0] != "no-op")) | .[] | 
            "| `\(.change.actions[0])` | `\(.type)` | `\(.name)` |"
          )
          ''' tfplan.json)
          echo "PLAN_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "$PLAN_SUMMARY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create or Update Pull Request to Main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PLAN_SUMMARY: ${{ env.PLAN_SUMMARY }}
        run: |
          # Garante que estamos na branch develop mais recente
          git fetch origin develop
          git checkout develop
          git reset --hard origin/develop

          existing_pr=$(gh pr list --base "main" --head "develop" --json number -q ".[0].number")
          
          if [ -z "$existing_pr" ]; then
            echo "No existing PR found from develop to main. Creating a new one."

            PR_BODY=$(cat <<-EOF
            Este PR foi gerado automaticamente após um merge na branch develop.
            Ele contém o plano do Terraform para as mudanças que serão aplicadas na main.
            
            $PLAN_SUMMARY
            EOF
            )

            gh pr create \
              --base main \
              --head develop \
              --title "Infra: Deploy from Develop to Main" \
              --body "$PR_BODY"
          else
            echo "A PR (#$existing_pr) from develop to main already exists. Adding plan as a comment."

            COMMENT_BODY=$(cat <<-EOF
            :robot: **Novo Plano do Terraform**
            Um novo push para a branch `develop` gerou o seguinte plano:
            
            $PLAN_SUMMARY
            EOF
            )

            gh pr comment $existing_pr --body "$COMMENT_BODY"
          fi
        working-directory: . # Volta para a raiz para executar os comandos git e gh
